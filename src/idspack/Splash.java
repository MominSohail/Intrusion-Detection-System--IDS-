/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package idspack;

import JImage.JIResizeImage;

import java.awt.Color;
import java.sql.*;
import java.util.TimeZone;
import java.util.Date;
import java.text.*;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.media.Buffer;
import javax.media.CannotRealizeException;
import javax.media.Manager;
import javax.media.MediaLocator;
import javax.media.NoPlayerException;
import javax.media.Player;
import javax.media.control.FrameGrabbingControl;
import javax.media.format.VideoFormat;
import javax.media.util.BufferToImage;
import javax.swing.ImageIcon;
import javax.swing.JToggleButton;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.font.*;
import java.awt.geom.AffineTransform;
import java.io.BufferedInputStream;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import javax.swing.JOptionPane;
//import java.util.*;

/**
 *
 * @author Mohammad
 */
public class Splash extends javax.swing.JFrame {

    public final static int SOCKET_PORT = 50000;  // you may change this
    public static String file_to_send ;  // you may change this
    int flags = 0;
    int count = 0;
    int fc = 2;
    public static int id;
    String unlock;

    int xMouse;
    int yMouse;
    static String userName;
    static String psw;
    public static int flag;

    Player player;
    BufferedImage bi;
    String fn;
    int no;

    systemtray sys = new systemtray();
    /**
     * Creates new form Splash
     */
    public Splash() {
        initComponents();

    }

    //Splash(FdmApp aThis) {
      //  throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    //}

    private void stopCamera() throws IOException, NoPlayerException, CannotRealizeException {
        
        player.close();
    }

    private void initCamera() throws IOException, NoPlayerException, CannotRealizeException {
        MediaLocator ml = new MediaLocator("vfw://0");
        player = Manager.createRealizedPlayer(ml);
        this.tbWebCam.add(player.getVisualComponent());
        player.start();
        
         tbCapture.setVisible(false);
                tbWebCam.setVisible(false);
    }

    private void setImageButton(JToggleButton tbutton, Image image) {
        tbutton.setIcon(new ImageIcon(image));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jOptionPane1 = new javax.swing.JOptionPane();
        txt = new javax.swing.JLabel();
        txt1 = new javax.swing.JLabel();
        submitlbl = new javax.swing.JLabel();
        clearlbl = new javax.swing.JLabel();
        pswlbl = new javax.swing.JLabel();
        userlbl = new javax.swing.JLabel();
        pswd = new javax.swing.JPasswordField();
        uname = new javax.swing.JTextField();
        Closebtn = new javax.swing.JLabel();
        minibtn = new javax.swing.JLabel();
        drag = new javax.swing.JLabel();
        changepsw = new javax.swing.JLabel();
        locbg = new javax.swing.JLabel();
        tbWebCam = new javax.swing.JToggleButton();
        tbCapture = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txt.setFont(new java.awt.Font("Microsoft PhagsPa", 0, 18)); // NOI18N
        txt.setForeground(new java.awt.Color(255, 255, 255));
        txt.setText("Clear");
        getContentPane().add(txt, new org.netbeans.lib.awtextra.AbsoluteConstraints(365, 224, 60, -1));

        txt1.setFont(new java.awt.Font("Microsoft PhagsPa", 0, 18)); // NOI18N
        txt1.setForeground(new java.awt.Color(255, 255, 255));
        txt1.setText("Log In");
        getContentPane().add(txt1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 224, 60, -1));

        submitlbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/button/button.png"))); // NOI18N
        submitlbl.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        submitlbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                submitlblMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                submitlblMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                submitlblMouseExited(evt);
            }
        });
        getContentPane().add(submitlbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 220, 120, 40));

        clearlbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/button/button.png"))); // NOI18N
        clearlbl.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        clearlbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearlblMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                clearlblMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                clearlblMouseExited(evt);
            }
        });
        getContentPane().add(clearlbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 220, 120, 40));

        pswlbl.setFont(new java.awt.Font("Myriad Pro", 0, 20)); // NOI18N
        pswlbl.setForeground(new java.awt.Color(255, 255, 255));
        pswlbl.setText("PASSWORD");
        getContentPane().add(pswlbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 150, 110, 30));

        userlbl.setFont(new java.awt.Font("Myriad Pro", 0, 20)); // NOI18N
        userlbl.setForeground(new java.awt.Color(255, 255, 255));
        userlbl.setText("USER NAME");
        getContentPane().add(userlbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 90, 110, 30));

        pswd.setBorder(null);
        getContentPane().add(pswd, new org.netbeans.lib.awtextra.AbsoluteConstraints(203, 150, 230, 30));

        uname.setFont(new java.awt.Font("Microsoft PhagsPa", 0, 14)); // NOI18N
        uname.setBorder(null);
        getContentPane().add(uname, new org.netbeans.lib.awtextra.AbsoluteConstraints(203, 90, 230, 30));

        Closebtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/button/close_btn.png"))); // NOI18N
        Closebtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Closebtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ClosebtnMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                ClosebtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                ClosebtnMouseExited(evt);
            }
        });
        getContentPane().add(Closebtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 8, 26, 19));

        minibtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/button/mini_btn.png"))); // NOI18N
        minibtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        minibtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                minibtnMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                minibtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                minibtnMouseExited(evt);
            }
        });
        getContentPane().add(minibtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(428, 8, 26, 19));

        drag.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                dragMouseDragged(evt);
            }
        });
        drag.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                dragMousePressed(evt);
            }
        });
        getContentPane().add(drag, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 500, 20));

        changepsw.setFont(new java.awt.Font("Microsoft PhagsPa", 0, 16)); // NOI18N
        changepsw.setForeground(new java.awt.Color(255, 255, 255));
        changepsw.setText("Update User Information");
        changepsw.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        changepsw.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                changepswMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                changepswMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                changepswMouseExited(evt);
            }
        });
        getContentPane().add(changepsw, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 262, 180, 30));

        locbg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/lockbg.png"))); // NOI18N
        locbg.setAutoscrolls(true);
        getContentPane().add(locbg, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 300));

        tbWebCam.setBackground(new java.awt.Color(255, 255, 255));
        tbWebCam.setForeground(new java.awt.Color(102, 153, 255));
        tbWebCam.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 153, 255), 2, true));
        getContentPane().add(tbWebCam, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 270, 290));

        tbCapture.setBackground(new java.awt.Color(255, 255, 255));
        tbCapture.setForeground(new java.awt.Color(102, 153, 255));
        tbCapture.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 153, 255), 2, true));
        tbCapture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbCaptureActionPerformed(evt);
            }
        });
        getContentPane().add(tbCapture, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 500, 300));

        setSize(new java.awt.Dimension(500, 300));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void ClosebtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ClosebtnMouseClicked

        if (count == 0 || count == 1 || count==2) {

            System.exit(0);
        } else {
            unlock = "UnSuccessful";
            //logsid();
            endlogs();
            fclogs();
            unlocklogs();

            System.exit(0);
        }
    }//GEN-LAST:event_ClosebtnMouseClicked

    private void minibtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minibtnMouseClicked
        this.setState(Splash.ICONIFIED);
    }//GEN-LAST:event_minibtnMouseClicked

    private void clearlblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearlblMouseClicked
        uname.setText(null);
        pswd.setText(null);
    }//GEN-LAST:event_clearlblMouseClicked

    private void submitlblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_submitlblMouseClicked

        String usr = uname.getText();
        String psd = new String(pswd.getPassword());
        if (usr.equals(userName) && psd.equals(psw)) {
            if (count == 0 || count == 1) {
                jOptionPane1.showMessageDialog(null, "Login Successfully..!","Success",JOptionPane.INFORMATION_MESSAGE);
                setVisible(false);
                new Mainfrm().setVisible(true);
            } else {
                unlock = "Successful";
                // logsid();
                endlogs();
                fclogs();
                unlocklogs();

                jOptionPane1.showMessageDialog(null, "Login Successfully..!","Success",JOptionPane.INFORMATION_MESSAGE);
                setVisible(false);
                new Mainfrm().setVisible(true);
            }
        } else {
            jOptionPane1.showMessageDialog(null, "Please Enter correct Username & Password","Error",JOptionPane.ERROR_MESSAGE);
            count++;

            pswd.setText(null);
            uname.setText(null);
            if (count == 2) {
              logs();
                try {
                    initCamera();
                } catch (IOException ex) {
                    Logger.getLogger(WebCamForm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (NoPlayerException ex) {
                    Logger.getLogger(WebCamForm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (CannotRealizeException ex) {
                    Logger.getLogger(WebCamForm.class.getName()).log(Level.SEVERE, null, ex);
                }

                for (int i = 0; i < 40000; i++) {
                    System.out.println(i);
                }

                captureimg();
                saveimg();
             /* try {
                    sendimg();
                } catch (IOException ex) {
                    Logger.getLogger(Splash.class.getName()).log(Level.SEVERE, null, ex);
                }*/
                imgstore();

                try {
                    // player.close();
                    stopCamera();
                } catch (IOException ex) {
                    Logger.getLogger(Splash.class.getName()).log(Level.SEVERE, null, ex);
                } catch (NoPlayerException ex) {
                    Logger.getLogger(Splash.class.getName()).log(Level.SEVERE, null, ex);
                } catch (CannotRealizeException ex) {
                    Logger.getLogger(Splash.class.getName()).log(Level.SEVERE, null, ex);
                }
                System.out.println("End of Camera ");
                //logsid();
                
                
            } else if (count > 2) {
                fc++;

            }
        }
    
    }//GEN-LAST:event_submitlblMouseClicked

    /*private void logsid() {
        Connection conn = null;
        try {
            String driverName = "oracle.jdbc.driver.OracleDriver";
            Class.forName(driverName);
            String serverName = "SOHAIL-PC";
            String serverPort = "1521";
            String sid = "XE";
            String url = "jdbc:oracle:thin:@" + serverName + ":" + serverPort + ":" + sid;
            String username = "ids";
            String password = "mypassword";
            conn = DriverManager.getConnection(url, username, password);
            System.out.println("Connection Successfull...");

        } catch (ClassNotFoundException | SQLException e) {
            System.out.println(e);
        }

        try {

            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery("Select * from logs");
            while (rs.next()) {
                int no = rs.getInt(1);
                System.out.println("logsid no befor" + no);
                id = no;
            }
        } catch (Exception e) {
            e.printStackTrace();

        }
    }
    */
     /*   try {
            Statement stmt;
            stmt = conn.createStatement();
            id++;
            System.out.println("logsid no After" + id);
            String sql = "INSERT INTO logs(logid) "
                    + "VALUES('" + id + "')";
            stmt.executeUpdate(sql);

            System.out.println("logid inserted");
            conn.close();
            //aWriter.write(currentTime + " " + s + "\n");
        } catch (Exception e) {
            e.printStackTrace();

        }

        
    }*/

    private void captureimg() {
        FrameGrabbingControl fgc = (FrameGrabbingControl) player.getControl("javax.media.control.FrameGrabbingControl");
        Buffer buffer = fgc.grabFrame();

        BufferToImage bti = new BufferToImage((VideoFormat) buffer.getFormat());
        Image image = bti.createImage(buffer);

        JIResizeImage resize = new JIResizeImage();
        bi = (BufferedImage) image;
        System.out.println("binary file"+bi);
        Image imageresize = resize.rescale(bi, 370, 210);

        this.setImageButton(this.tbCapture, imageresize);

    }

    private void saveimg() {
        fn = "K:\\6th sem\\Project\\Sohail ids\\Ids\\src\\images\\Insert\\ " + id + "" + "I.jpg";
        try {
            File make = new File(fn);
            try {
                 bi = linearResizeBi(bi, 360, 220);
                ImageIO.write(bi, "jpg", make);
            } catch (Exception ex) {
                Logger.getLogger(WebCamForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (Exception ex) {

        }

    }
    
    public void sendimg() throws IOException
    {
        file_to_send = fn ;
        FileInputStream fis = null;
        BufferedInputStream bis = null;
        OutputStream os = null;
        ServerSocket servsock = null;
        Socket sock = null;
        try 
        {
            servsock = new ServerSocket(SOCKET_PORT);
        while (true)
        {
            System.out.println("Waiting...");
        try {
            sock = servsock.accept();
            System.out.println("Accepted connection : " + sock);
          // send file
            File myFile = new File (file_to_send);
            byte [] mybytearray  = new byte [(int)myFile.length()];
            fis = new FileInputStream(myFile);
            bis = new BufferedInputStream(fis);
            bis.read(mybytearray,0,mybytearray.length);
            os = sock.getOutputStream();
            System.out.println("Sending " + file_to_send + "(" + mybytearray.length + " bytes)");
            os.write(mybytearray,0,mybytearray.length);
            os.flush();
            System.out.println("Done.");
            flags = 1;
            if(flags==1)
            {
            break;
            }
        }
        finally
        {
            if (bis != null){ bis.close();}            
            if (os != null) {os.close();}
            if (sock!=null) {sock.close();}
        }
      }
    }
        finally
        {
            if (servsock != null) servsock.close();
        }
        return;
}
    
static public BufferedImage linearResizeBi(BufferedImage origin, int width, int height) {
        BufferedImage resizedImage = new BufferedImage(width, height ,BufferedImage.TYPE_INT_RGB);
        Graphics2D g = resizedImage.createGraphics();
        float xScale = (float)width / origin.getWidth();
        float yScale = (float)height / origin.getHeight();
        AffineTransform at = AffineTransform.getScaleInstance(xScale,yScale);
        g.drawRenderedImage(origin,at);
        g.dispose();
        return resizedImage;
    }
    void imgstore() {
        Connection conn = null; 
        try {
            String driverName = "oracle.jdbc.driver.OracleDriver";
            Class.forName(driverName);
            String serverName = "SOHAIL-PC";
            String serverPort = "1521";
            String sid = "XE";
            String url = "jdbc:oracle:thin:@" + serverName + ":" + serverPort + ":" + sid;
            String username = "ids";
            String password = "mypassword";
            conn = DriverManager.getConnection(url, username, password);
            System.out.println("Connection Successfull...");

        } catch (ClassNotFoundException | SQLException e) {
            System.out.println(e);
        }
        //no = Splash.id;
        try {
            PreparedStatement ps = conn.prepareStatement("insert into imgtable values(?,?)");
            ps.setInt(1, id);

            FileInputStream fin = new FileInputStream("K:\\6th sem\\Project\\Sohail ids\\Ids\\src\\images\\Insert\\ " + id + "" + "I.jpg");

            ps.setBinaryStream(2, fin, fin.available());
            int i = ps.executeUpdate();
            System.out.println(i + " records affected");

            conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }

        //Splash.flag = 1;
        //this.dispose();
    }

    public void logs() {

        // public static void write(String f, String s) throws IOException {
        TimeZone tz = TimeZone.getTimeZone("EST"); // or PST, MID, etc ...
        Date now = new Date();
        DateFormat df = new SimpleDateFormat("dd.mm.yyyy   hh:mm:ss ");
        df.setTimeZone(tz);
        String currentTime = df.format(now);

        System.out.println(currentTime);

        Connection conn1 = null;
        try {
            String driverName = "oracle.jdbc.driver.OracleDriver";
            Class.forName(driverName);
            String serverName = "SOHAIL-PC";
            String serverPort = "1521";
            String sid = "XE";
            String url = "jdbc:oracle:thin:@" + serverName + ":" + serverPort + ":" + sid;
            String username = "ids";
            String password = "mypassword";
            conn1 = DriverManager.getConnection(url, username, password);

            try {
                Statement stmt;
                stmt = conn1.createStatement();

            //    String sql = "Update logs set sdt = ('" + currentTime + "') " + " where logid =('" + id + "')";

                String sql = "INSERT INTO logs(sdt) "
                    + "VALUES('" + currentTime + "')";
            
                stmt.executeUpdate(sql);

                System.out.println("start time & Date inserted");
                
                //logsid();
                conn1.close();
                //aWriter.write(currentTime + " " + s + "\n");
            } catch (Exception e) {
                e.printStackTrace();

            }
        } catch (ClassNotFoundException | SQLException e) {
            System.out.println(e);
        }
          Connection conn = null;
        try {
            String driverName = "oracle.jdbc.driver.OracleDriver";
            Class.forName(driverName);
            String serverName = "SOHAIL-PC";
            String serverPort = "1521";
            String sid = "XE";
            String url = "jdbc:oracle:thin:@" + serverName + ":" + serverPort + ":" + sid;
            String username = "ids";
            String password = "mypassword";
            conn = DriverManager.getConnection(url, username, password);
            System.out.println("Connection Successfull...");

        } catch (ClassNotFoundException | SQLException e) {
            System.out.println(e);
        }

        
        
         try {
               
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery("Select * from logs where sdt = ('" + currentTime + "') ");
            while (rs.next()) {
                int no = rs.getInt(1);
                System.out.println("logsid no befor" + no);
                id = no;
            }
        } catch (Exception e) {
            e.printStackTrace();

        }

    }

    public void endlogs() {

        // public static void write(String f, String s) throws IOException {
        TimeZone tz = TimeZone.getTimeZone("EST"); // or PST, MID, etc ...
        Date now = new Date();
        DateFormat df = new SimpleDateFormat("dd.mm.yyyy   hh:mm:ss ");
        df.setTimeZone(tz);
        String currentTime = df.format(now);

        System.out.println(currentTime);

        Connection conn1 = null;
        try {
            String driverName = "oracle.jdbc.driver.OracleDriver";
            Class.forName(driverName);
            String serverName = "SOHAIL-PC";
            String serverPort = "1521";
            String sid = "XE";
            String url = "jdbc:oracle:thin:@" + serverName + ":" + serverPort + ":" + sid;
            String username = "ids";
            String password = "mypassword";
            conn1 = DriverManager.getConnection(url, username, password);

            try {
                Statement stmt;
                stmt = conn1.createStatement();

                String sql = "Update logs set edt = ('" + currentTime + "') " + " where logid =('" + id + "')";
                stmt.executeUpdate(sql);

                System.out.println("End Date $ Time inserted");
                conn1.close();
                //aWriter.write(currentTime + " " + s + "\n");
            } catch (Exception e) {
                e.printStackTrace();

            }
        } catch (ClassNotFoundException | SQLException e) {
            System.out.println(e);
        }

    }

    public void fclogs() {

        Connection conn1 = null;
        try {
            String driverName = "oracle.jdbc.driver.OracleDriver";
            Class.forName(driverName);
            String serverName = "SOHAIL-PC";
            String serverPort = "1521";
            String sid = "XE";
            String url = "jdbc:oracle:thin:@" + serverName + ":" + serverPort + ":" + sid;
            String username = "ids";
            String password = "mypassword";
            conn1 = DriverManager.getConnection(url, username, password);

            try {
                Statement stmt;
                stmt = conn1.createStatement();

                String sql = "Update logs set fc = ('" + fc + "') " + " where logid =('" + id + "')";
                stmt.executeUpdate(sql);

                System.out.println("Failure count inserted");
                conn1.close();
                //aWriter.write(currentTime + " " + s + "\n");
            } catch (Exception e) {
                e.printStackTrace();

            }
        } catch (ClassNotFoundException | SQLException e) {
            System.out.println(e);
        }

    }

    public void unlocklogs() {

        Connection conn1 = null;
        try {
            String driverName = "oracle.jdbc.driver.OracleDriver";
            Class.forName(driverName);
            String serverName = "SOHAIL-PC";
            String serverPort = "1521";
            String sid = "XE";
            String url = "jdbc:oracle:thin:@" + serverName + ":" + serverPort + ":" + sid;
            String username = "ids";
            String password = "mypassword";
            conn1 = DriverManager.getConnection(url, username, password);

            try {
                Statement stmt;
                stmt = conn1.createStatement();

                String sql = "Update logs set unlock = ('" + unlock + "') " + " where logid =('" + id + "')";

                stmt.executeUpdate(sql);

                System.out.println("Unlock inserted");
                conn1.close();
                //aWriter.write(currentTime + " " + s + "\n");
            } catch (Exception e) {
                e.printStackTrace();

            }
        } catch (ClassNotFoundException | SQLException e) {
            System.out.println(e);
        }

    }


    private void dragMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dragMouseDragged
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();

        this.setLocation(x - xMouse, y - yMouse);
    }//GEN-LAST:event_dragMouseDragged

    private void dragMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dragMousePressed
        xMouse = evt.getX();
        yMouse = evt.getY();
    }//GEN-LAST:event_dragMousePressed

    private void changepswMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_changepswMouseClicked
        setVisible(false);
        new ChangePsw().setVisible(true);
    }//GEN-LAST:event_changepswMouseClicked

    private void tbCaptureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbCaptureActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tbCaptureActionPerformed

    private void submitlblMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_submitlblMouseEntered
            submitlbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/button/button_hower.png")));
    }//GEN-LAST:event_submitlblMouseEntered

    private void submitlblMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_submitlblMouseExited
        submitlbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/button/button.png")));
    }//GEN-LAST:event_submitlblMouseExited

    private void clearlblMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearlblMouseEntered
        clearlbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/button/button_hower.png")));
    }//GEN-LAST:event_clearlblMouseEntered

    private void clearlblMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearlblMouseExited
        clearlbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/button/button.png")));
    }//GEN-LAST:event_clearlblMouseExited

    private void minibtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minibtnMouseEntered
minibtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/button/mini_btn_clk.png")));
    }//GEN-LAST:event_minibtnMouseEntered

    private void minibtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minibtnMouseExited
minibtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/button/mini_btn.png")));        // TODO add your handling code here:
    }//GEN-LAST:event_minibtnMouseExited

    private void ClosebtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ClosebtnMouseEntered
Closebtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/button/close_btn_clk.png")));
    }//GEN-LAST:event_ClosebtnMouseEntered

    private void ClosebtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ClosebtnMouseExited
Closebtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/button/close_btn.png")));
    }//GEN-LAST:event_ClosebtnMouseExited

    private void changepswMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_changepswMouseEntered
Font font = new Font ("Microsoft pagspa", Font.BOLD, 14);
 changepsw.setFont (font);
 changepsw.setForeground(Color.white);
    }//GEN-LAST:event_changepswMouseEntered

    private void changepswMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_changepswMouseExited
Font font = new Font ("Microsoft PhagsPa", NORMAL, 14);
 changepsw.setFont (font);
 changepsw.setForeground(Color.white);
    }//GEN-LAST:event_changepswMouseExited

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        Connection conn = null;
        try {
            String driverName = "oracle.jdbc.driver.OracleDriver";
            Class.forName(driverName);
            String serverName = "SOHAIL-PC";
            String serverPort = "1521";
            String sid = "XE";
            String url = "jdbc:oracle:thin:@" + serverName + ":" + serverPort + ":" + sid;
            String username = "ids";
            String password = "mypassword";
            conn = DriverManager.getConnection(url, username, password);
            // System.out.println("Connection Successfull...");

            try {

                Statement st = conn.createStatement();

                ResultSet rs = st.executeQuery("Select * from login");
                while (rs.next()) {

                    userName = rs.getString(1).toString();
                    psw = rs.getString(2).toString();
                    // System.out.println(" " + userName +" " + psw);
                }
                rs.close();
                conn.close();
            } catch (Exception e) {
                e.printStackTrace();

            }

        } catch (ClassNotFoundException | SQLException e) {
            System.out.println(e);
        }



       

        
        
        
        
        
        
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Splash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Splash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Splash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Splash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        /*java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    Thread.sleep(1500);
                } catch (Exception e) {

                }
                new Splash().setVisible(true);
            }
        });*/
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Closebtn;
    private javax.swing.JLabel changepsw;
    private javax.swing.JLabel clearlbl;
    private javax.swing.JLabel drag;
    private javax.swing.JOptionPane jOptionPane1;
    private javax.swing.JLabel locbg;
    private javax.swing.JLabel minibtn;
    private javax.swing.JPasswordField pswd;
    private javax.swing.JLabel pswlbl;
    private javax.swing.JLabel submitlbl;
    private javax.swing.JToggleButton tbCapture;
    private javax.swing.JToggleButton tbWebCam;
    private javax.swing.JLabel txt;
    private javax.swing.JLabel txt1;
    private javax.swing.JTextField uname;
    private javax.swing.JLabel userlbl;
    // End of variables declaration//GEN-END:variables
}
